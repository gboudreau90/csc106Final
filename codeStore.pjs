//to create splash screen... 12/12/22
//keep score
var score = 0;

//stores speed values
var speedScore = (random(1, 4));

//determines which scene to play
var currentScene = 2;

//tracks position
var position = 0;

//determines game screen on/off
var stillPlaying = true;

//previous bitmoji
var drawBitmojiHead = function (bitmojiX, bitmojiY, bitmojiHeight)
{
noStroke(); 
fill(237, 214, 154);
ellipse(bitmojiX-(bitmojiHeight/200*2), bitmojiY+(bitmojiHeight/200*44), (bitmojiHeight/200*88), (bitmojiHeight/200*99));//head
rect(bitmojiX-(bitmojiHeight/200*17),bitmojiY+(bitmojiHeight/200*89),(bitmojiHeight/200*28),(bitmojiHeight/200*20),(bitmojiHeight/200*0));//neck
noFill();
strokeWeight(2);
stroke(0, 0, 0);
line(bitmojiX-(bitmojiHeight/200*-20),bitmojiY+(bitmojiHeight/200*70),bitmojiX-(bitmojiHeight/200*18),bitmojiY+(bitmojiHeight/200*72));//mouth
noStroke();
fill(255, 255, 255);
ellipse(bitmojiX+(bitmojiHeight/200*16), bitmojiY+(bitmojiHeight/200*32), (bitmojiHeight/200*15), (bitmojiHeight/200*13));//righteyeball
fill(0, 0, 0); 
ellipse(bitmojiX+(bitmojiHeight/200*16), bitmojiY+(bitmojiHeight/200*32), (bitmojiHeight/200*5), (bitmojiHeight/200*5));//rightpupil
noStroke(); 
fill(255, 255, 255);
ellipse(bitmojiX-(bitmojiHeight/200*18), bitmojiY+(bitmojiHeight/200*32), (bitmojiHeight/200*15), (bitmojiHeight/200*13));//lefteyeball
fill(0, 0, 0); 
ellipse(bitmojiX-(bitmojiHeight/200*18), bitmojiY+(bitmojiHeight/200*32), (bitmojiHeight/200*5), (bitmojiHeight/200*5));//rightpupil
stroke(0, 0, 0);
noFill();
bezier(bitmojiX-(bitmojiHeight/200*4), bitmojiY+(bitmojiHeight/200*53), bitmojiX+(bitmojiHeight/200*39), bitmojiY+(bitmojiHeight/200*79), bitmojiX-(bitmojiHeight/200*17), bitmojiY-(bitmojiHeight/200*3), bitmojiX+(bitmojiHeight/200*11), bitmojiY+(bitmojiHeight/200*42));//nose
noStroke();
fill(255, 0, 0);//hat
quad(bitmojiX-(bitmojiHeight/200*31), bitmojiY-(bitmojiHeight/200*5), bitmojiX+(bitmojiHeight/200*22), bitmojiY+(bitmojiHeight/200*4), bitmojiX+(bitmojiHeight/200*83), bitmojiY+(bitmojiHeight/200*15), bitmojiX-(bitmojiHeight/200*39), bitmojiY+(bitmojiHeight/200*16));//hat
ellipse(bitmojiX-(bitmojiHeight/200*3), bitmojiY-(bitmojiHeight/200*4),(bitmojiHeight/200*56), (bitmojiHeight/200*-26));//hat
rect(bitmojiX-(bitmojiHeight/200*30),bitmojiY-(bitmojiHeight/200*12),(bitmojiHeight/200*55),(bitmojiHeight/200*22),(bitmojiHeight/200*90));//hat
rect(bitmojiX-(bitmojiHeight/200*28),bitmojiY-(bitmojiHeight/200*12),(bitmojiHeight/200*57),(bitmojiHeight/200*27),(bitmojiHeight/200*20));//hat
strokeWeight(2);
stroke(0, 0, 0);
line(bitmojiX-(bitmojiHeight/200*13),bitmojiY+(bitmojiHeight/200*21),bitmojiX-(bitmojiHeight/200*27),bitmojiY+(bitmojiHeight/200*24));//lefteyebrow
line(bitmojiX+(bitmojiHeight/200*25),bitmojiY+(bitmojiHeight/200*21),bitmojiX+(bitmojiHeight/200*10),bitmojiY+(bitmojiHeight/200*19));//righteyebrow
};
var drawBitmojiBody = function (bitmojiX, bitmojiY, bitmojiHeight)
{
noStroke();
fill(237, 214, 154);
ellipse(bitmojiX+(bitmojiHeight/200*47),bitmojiY+(bitmojiHeight/200*206),(bitmojiHeight/200*19),(bitmojiHeight/200*19));//righthand
fill(237, 214, 154);
ellipse(bitmojiX-(bitmojiHeight/200*55),bitmojiY+(bitmojiHeight/200*206),(bitmojiHeight/200*19),(bitmojiHeight/200*19));//lefthand
fill(0, 0, 0);
rect(bitmojiX-(bitmojiHeight/200*48),bitmojiY+(bitmojiHeight/200*109),(bitmojiHeight/200*90),(bitmojiHeight/200*112),(bitmojiHeight/200*22));//torso
fill(0, 0, 0);
rect(bitmojiX-(bitmojiHeight/200*65),bitmojiY+(bitmojiHeight/200*122),(bitmojiHeight/200*21),(bitmojiHeight/200*85),(bitmojiHeight/200*10));//leftarm
rect(bitmojiX+(bitmojiHeight/200*37),bitmojiY+(bitmojiHeight/200*122),(bitmojiHeight/200*21),(bitmojiHeight/200*85),(bitmojiHeight/200*10));//rightarm
fill(255, 255, 255);//initals
textSize(bitmojiHeight/160*30);
text("GB", bitmojiX-(bitmojiHeight/151*22),bitmojiY+(bitmojiHeight/134*110));
};
var drawBitmoji = function (bitmojiX, bitmojiY, bitmojiHeight)
{
    drawBitmojiHead(bitmojiX, bitmojiY, bitmojiHeight);
    drawBitmojiBody(bitmojiX, bitmojiY, bitmojiHeight);
};
//draw basket for catching
var drawBasket = function (Bx,By,Bh) {   
    fill(110, 6, 6);
    quad(Bx+(Bh/200*205),By+(Bh/200*370),Bx+(Bh/200*259),By+(Bh/200*370),Bx+(Bh/200*275),By+(Bh/200*330),Bx+(Bh/200*185),By+(Bh/200*330));
    stroke(0, 0, 0);
    strokeWeight(1);
    line(Bx+(Bh/200*256),By+(Bh/200*369),Bx+(Bh/200*187),By+(Bh/200*331));
    line(Bx+(Bh/200*202),By+(Bh/200*362),Bx+(Bh/200*202),By+(Bh/200*331));
    line(Bx+(Bh/200*210),By+(Bh/200*369),Bx+(Bh/200*210),By+(Bh/200*331));
    line(Bx+(Bh/200*218),By+(Bh/200*369),Bx+(Bh/200*218),By+(Bh/200*331));
    line(Bx+(Bh/200*226),By+(Bh/200*369),Bx+(Bh/200*226),By+(Bh/200*331));
    line(Bx+(Bh/200*234),By+(Bh/200*369),Bx+(Bh/200*234),By+(Bh/200*331));
    line(Bx+(Bh/200*242),By+(Bh/200*369),Bx+(Bh/200*242),By+(Bh/200*331));
    line(Bx+(Bh/200*250),By+(Bh/200*369),Bx+(Bh/200*250),By+(Bh/200*331));
    line(Bx+(Bh/200*257),By+(Bh/200*369),Bx+(Bh/200*257),By+(Bh/200*331));
    line(Bx+(Bh/200*205),By+(Bh/200*369),Bx+(Bh/200*274),By+(Bh/200*331));
};

//apple to call later
var drawApples = function() {
    fill(255, 0, 0);//apple
    ellipse(213, 188, 27, 21);
    stroke(78, 38, 0);
    strokeWeight(3);
    line(213, 184, 208, 175);
    noStroke();
    fill(39, 166, 21);
    ellipse(215, 177, 5, 13);
};

//
//BUTTONS
//

//copied khan button
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(255, 255, 255);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(18);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

//start button
var startBtn = new Button({
    x: 133,
    y: 267,
    width: 127,
    label: "Click to Start",
    onClick: function() {
    currentScene = 2;
    }
}); 

mouseClicked = function() {
    startBtn.handleMouseClick();
};

//"splash" screen
var titleScene = function() {
    currentScene = 1;
    background(157, 232, 65);
    fill(0, 0, 0);
    textSize(45);
    text("Fruit Collecter 1", 43, 20);
    textSize(28);
    text("By Greyson Boudreau", 62, 365);
    drawBitmoji(200,106,144,80);
    startBtn.draw();
}; 

//copied khan button
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 150;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.onClick = config.onClick || function() {};
};

Button.prototype.draw = function() {
    fill(255, 28, 28);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(0, 0, 0);
    textSize(18);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/4);
};

Button.prototype.isMouseInside = function() {
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

//creates start button
var startBtn = new Button({
    x: 133,
    y: 267,
    width: 127,
    label: "Click to Start",
    onClick: function() {
        currentScene = 2;
        stillPlaying = true;
    }
});

//when button clicked change scene
mouseClicked = function() {
    startBtn.handleMouseClick();
}; 

//
//BASKET MOVEMENT/ OBJ PLACEMENT
//

//basket constructor
var Basket = function(config, x, y) {
    this.x = config.x || 150;
    this.y = config.y || 150;
    this.apple = 0;
}; 

//drawing basket & constraining movement on X axis DONE
Basket.prototype.draw = function() {
    this.x = constrain(this.x, -108, height-164);     
    fill(0, 0, 0);
    drawBasket(this.x,this.y, 118);
}; 

//checks if basket is under apple DONE
Basket.prototype.checkCollision = function(stick) {
    if ((stick.x >= this.x && stick.x <= (this.x + 125)) &&
        (stick.y >= this.y + 122 && stick.y <= (this.y + 132))) {
        stick.y = -400;
        score++;
    }
}; 

//basket move right with space DONE
Basket.prototype.hop = function() {
    this.x -= 5;
}; 

//return basket to left side DONE
Basket.prototype.fall = function() {
    this.x += 5;
}; 

//
//APPLE
//

//apple constructor
var Apple = function(x, y, speedScore) {
    this.x = x;
    this.y = y;
    this.speed = speedScore;
}; 

//draw method for fruit(apple)
Apple.prototype.draw = function() {
    noStroke();
    fill(255, 0, 0);//apple
    ellipse(this.x+50, this.y+60, 27, 21);
    stroke(78, 38, 0);
    strokeWeight(3);
    line(this.x+50, this.y+53, this.x+45, this.y+43);
    noStroke();
    fill(39, 166, 21);
    ellipse(this.x+52, this.y+48, 5, 13);
};

//
//GAME RULES
//

//basket created
var basket = new Basket(0, 0);

//array to call for random positions
var apples = [];

//call random apple position from array FIX!!!! ---FIXED [DONE] 12/18/22
for (var i = 1; i < 86; i++) {
    apples.push(new Apple(327 - i*7, random(-95, -1445)));
}

//scene for the game
var gameScene = function() {
    background(212, 255, 252);
    fill(5, 56, 1);
    rectMode(CORNER);
    rect(0, height*0.90, width, height*0.10);
    
    //print score and speed of apples
    fill(0, 0, 0);
    textSize(18);
    text("Score: " + score, 5, 0);
    
    //rounds speed number so its not a long decimal
    text("Speed: " + Math.round(speedScore), 5, 20);
    
    //counts apples
    var numberApples = 0;
    //use off screen count apples
    if(stillPlaying) {
        for(var i = 0; i < apples.length; i++){
            if(apples[i].y > 400)
            {apples[i].y = -86;}
            {numberApples++;}
        }  
    }
    
    //call check for collisions
    for (var i = 0; i < apples.length/2; i++) {
        apples[i].draw();
        basket.checkCollision(apples[i]);
        
        //random constant apples speed
        apples[i].y += speedScore;
        
        //end game after >100 score
        if(score >= 101) {
            stillPlaying = false;
            //play end scene
            currentScene = 3;
        }
    }
    
    //if key press move right if no key press default to left side of screen
    if (keyIsPressed && keyCode === 0) 
        {basket.fall();
        } else {basket.hop();
    }
        
    basket.draw();
}; 

//end scene after score of 100 reached
var endScene = function() {
    currentScene = 3;
    fill(0, 0, 0);
    background(157, 232, 65);
    textSize(45);
    text("Good Job!", 95, 95);
    textSize(25);
    text("You Win", 157, 141);
    textSize(28);
    text("Press >Restart< to Play Again!", 8, 296);
    drawApples();
    drawBasket(4,-98,174);
};

//Changes scenes via checking stillPlaying/ currentScene
draw = function() {
    if (currentScene === 1) { 
    titleScene(); 
    }
    else if (currentScene === 2 && stillPlaying === true) {
    gameScene();
    }
    else if (currentScene === 3 && stillPlaying === false) {
    endScene();
    }
}; 

